import csv
import os
from collections import defaultdict
from random import randint, seed
from typing import Dict, Union

import click
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from lrgwd.extractor.config import DEFAULTS
from lrgwd.extractor.utils import (Data, extract_3D_tensors, extract_tensors,
                                   vectorized_extract_tensors)
from lrgwd.utils.logger import logger
from lrgwd.utils.tracking import tracking
from matplotlib.ticker import FormatStrFormatter
from scipy.stats import pearsonr, spearmanr
from tqdm import tqdm

"""
Extracts the list of given features from the npz file generated by ingestor.
Combines features into columnar tensors that can be used for training and saves to csv file.
Can optionally shuffle data and include only certain features' pressure levels.

Example Usage:
python lrgwd extractor \\
    --save-path ./runs/data/dev/ingestor/raw_data.npz \\
    --source-path ./runs/data/dev/extractor \\
    --features hght --features temp --features ucomp --features vcomp --features omega \\
    --pressure-levels 22 \\
    --shuffle \\
"""
@click.command("extractor")
@click.option(
    "--save-path",
    default=DEFAULTS["save_path"],
    show_default=True,
    type=str,
    help="File path to save extracted dataset",
)
@click.option(
    "--source-path",
    default=DEFAULTS["source_path"],
    show_default=True,
    type=str,
    help="File path to raw dataset as npz",
)
@click.option(
    "--plevels-included",
    default=DEFAULTS["plevels_included"],
    type=int,
    help="Use only the top N plevels"
)
@click.option(
    "--features",
    default=DEFAULTS["features"],
    show_default=True,
    multiple=True,
    help="List of features to extract"
)
@click.option(
    "--num-samples",
    default=DEFAULTS["num_samples"],
    show_default=True,
    type=int,
    help="Num of samples to creates. Defaults to using all data in source path"
)
@click.option(
    "--generate-cnn-features/--no-generate-cnn-features",
    default=False,
    show_default=True,
    help="Generate 3D features matricies"
)
@click.option(
    "--step-size",
    default=DEFAULTS["CNN_features"]["step_size"],
    type=int,
    help="Step size in 6hr increments between vertical columns in 3d features"
)
@click.option(
    "--start-time",
    default=DEFAULTS["CNN_features"]["start_time"],
    type=int,
    help="Number of 6hr increments to before current sample to start when creating 3d features"
)
@click.option(
    "--num-steps",
    default=DEFAULTS["CNN_features"]["num_steps"],
    type=int,
    help="Number of steps to go back in time from current vertical columns when constructing 3d features"
)
@click.option(
    "--tracking/--no-tracking",
    default=True,
    show_default=True,
    help="Track run using mlflow"
)
@click.option(
    "--shuffle/--no-shuffle",
    default=True,
    show_default=True,
    help=""
)
@click.option("--verbose/--no-verbose", default=True)
def main(**params):
    """
    Extracts samples from raw dataset.
    """
    with tracking(
        experiment="extractor",
        params=params,
        local_dir=params["save_path"],
        tracking=params["tracking"]
    ):
        with np.load(params["source_path"], allow_pickle=False) as npz_data:
            data = Data(npz_data)
            os.makedirs(params["save_path"], exist_ok=True)

            # Create FEATURE TENSORS
            if params["verbose"]:
                logger.info(f"Generate Feature Tensors")

            if params["generate_cnn_features"]:
                extract_3D_tensors(
                    data=data,
                    save_path=params["save_path"],
                    step_size=params["step_size"],
                    num_steps=params["num_steps"],
                    start_time=params["start_time"],
                    num_samples=params["num_samples"],
                )
            else:
                features = list(params["features"])
                logger.info(f"FEATURES: {features}")
                vectorized_extract_tensors(
                    data=data,
                    save_path=params["save_path"],
                    num_samples=params["num_samples"],
                    features=features,
                    plevels=params["plevels_included"],
                    verbose=params["verbose"],
                    shuffle=params["shuffle"]
                )



if __name__ == "__main__":
    main()
